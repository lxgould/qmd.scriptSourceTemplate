---
title: "Automated Script Execution Report"
format:
  email:
    toc: true
    toc_depth: 2
    toc-location: right
    anchor-sections: false
    css: report.css
email-preview: false
engine: knitr
resource_files:
- run_something.R
- make_data_file.R
---

```{r setup}
#| echo: FALSE

reportName <- "Automated Script Execution Report"
app_name   <- "Shiny Scripting Template"
shinyExt   <- "scriptingTemplate_app/"
connectURL <- glue::glue("https://connect.spgenetics.com/{shinyExt}")


report_link <- "https://connect.spgenetics.com/scriptingTemplate_rpt"

#- List the scripts here that need to be run. "script_name = "status".
#- status default to "failure" and changes depending on the outcome
#- of the script execution.
script_list <-list("make_data_file.R" = "failure", 
                   "run_something.R" = "failure")

#- for keeping track of scripts and errors
success_count = 0
error_count = 0
error_scripts = c()


#- Set up a hook so R errors are highlighted
knitr::knit_hooks$set(error = function(x, options) { 
  paste(c('\n\n:::{style="color:Crimson; background-color: SeaShell;"}',
          gsub('^## Error', '**ERROR**', x),
          ':::'), collapse = '\n')
})

```

---
subtitle: "[`r app_name`](`r connectURL`)"
---


## Header

This report shows the results of running scripts for the [`r app_name`](`r connectURL`) app. The header section describes the report



## Environment Parameters

In this section we want to show parameter information from the operating system

---

```{bash}
#| label: shell_info
#| echo: FALSE

ME=`basename $0 .sh`
CL="`basename $0` ${@}"
CWD=`pwd`
ME_START=`date +"%Y%m%d_%T"`

printf "\n%-20s:\n" "BEGIN PROGRAM" 
printf "%s\n" "-------------------------------------------"
printf "%-20s: %s\n" "Command Line" "${CL}"
printf "%-20s: %s\n" "Time" "$ME_START"
printf "%-20s: %s\n" "User" "$USER"
printf "%-20s: %s\n" "Home Dir." "$HOME"
printf "%-20s: %s\n" "Shell" "$SHELL"
printf "%-20s: %s\n" "PWD" "$CWD"
printf "%-20s: %s\n" "Host" `hostname -s | tr '[a-z]' '[A-Z]'`
printf "%-20s: %s\n" "LANG" "$LANG"
printf "%-20s: %s\n" "R Home" "$R_HOME"
printf "%s\n" '------------------------------------'
```




---

## R Scripts

```{r, echo=FALSE, include=TRUE, error=TRUE, results='asis'}

for (script in names(script_list)) {
  
  knitr::knit_child(
    text = c(
      glue::glue("### Script: \"{script}\""),
      '```{r, echo = F, results=\'markup\'}',
      'result <- tryCatch(
         { source(script, print.eval = TRUE) },
         error = function(e) { c("error", e) }
       )',
      '```'
    ), 
    quiet = T, envir = environment()
  ) |>
    cat(sep = '\n')

  
  if (result[1] == "error") {
    error_count = error_count + 1
    error_scripts = c(error_scripts, script)
    knitr::knit_child(
      text = as.character(
        htmltools::tagList(
          htmltools::div(
            htmltools::p(
              "***ERROR***: ", 
              result[2], 
              style = "color:Crimson; background-color: SeaShell; padding-left: 7px;"
            ),
            style = "border-left: 5px solid Crimson; margin: 20px 0px;"
          )
        )
      ), quiet = T) |>
      cat()
  } else {
    success_count = success_count + 1
    script_list[[script]] = "success"
  }
  
  cat("---", "\n")
}

```


```{r results='asis', echo = FALSE}
script_df <- t(as.data.frame(script_list))
names(script_df) <- c("script", "status")

if (error_count > 0 | success_count == 0) {
  statusSymbol <- fontawesome::fa("triangle-exclamation", fill = "#F4A71C", margin_right = '0.2em')
  statusMsg <- "ERRORS FOUND!"
  sendEmail <- T
} else {
  statusSymbol <- fontawesome::fa("circle-check", fill = "#63A945", prefer_type = "solid", margin_right = '0.2em')
  statusMsg <- "No errors found"
  sendEmail <- F
}
```

## `r statusSymbol` Status: _`r statusMsg`_ 



```{r}
#| echo: FALSE

knitr::kable(script_df)
```


<!-- Setup email to send on error -->

::: {.email}

::: {.email-scheduled}
`{r} sendEmail`
:::

::: {.subject}
ERROR: `{r} reportName`
:::

The "`r paste(app_name, reportName)`" encountered errors while running the following scripts:

```{r, include = F, echo = F}

errorList <- sapply(error_scripts, USE.NAMES = F, FUN = function(x){
  htmltools::tags$li(x) |>
    as.character()
}) |>
  c()

```

```{r, echo = F,  results='asis'}
cat(errorList)
htmltools::tags$br() |>
  as.character() |>
  cat("\n")
```

Visit the [hosted report]({{< env RSC_REPORT_URL >}})
for full details.

:::


